#ifndef DATA_H
#define DATA_H

#include <stdint.h>

#define PACKED __attribute__ ((__packed__))

//Всего байт в сообщении: (10 — заголовок, данные 35) = 45;
struct PACKED RadioInputs
{
    uint8_t protocol;                   //Номер версии протокола по радиканалу
    uint32_t timeCurrent;               //Текущее время с учетом часового пояса
    uint16_t stationCode;               //Код станции (В соответствии с классификатором метрополитена)
    uint8_t cduCounter;                 //Последовательный счетчик сообщений, увеличивающееся на единицу с каждым следующим сообщением
    uint8_t way;                        //Номер главного станционного пути. 1 - первый главный путь, 2 - второй главный путь
    uint8_t NData;                      //Количество данных(34)
    struct PACKED KRUtype               //разрешенные режимы от СА
    {
        uint8_t enModes       : 2;      //разрешеные для ПА. 0 - нет информации;1 — режим АВ;2 - режим КС;3 — режим АЛС;
        uint8_t OPVinfo       : 3;      //0 — нет информации от ДПУ;1 - недоезд до зоны ОПВ;2 - переезд зоны ОПВ;3 - в зоне ОПВ;4 — отказ ДПУ.
        uint8_t AVInfo        : 1;      //1 — наличие параметров автоведения от ЦП; 0 — нет параметров автоведения от ЦП;
        uint8_t ReadyGo       : 1;      //Признак "Готовность к отправлению" 1 — есть готовность; 0 — нет готовности;
        uint8_t exactStop     : 1;      //Признак "Точная остановка состава"
    } KRU;
    struct PACKED DACtype               //cостояние станционных дверей (всех по «И»)
    {
        uint8_t DoorState     : 2;      //состояние дверей станции 0 - нет данных;2 - закрыты;1 — открыты;3 — выключена из действия;
        uint8_t PDS           : 2;      //(Промежуток дверь-состав (ПДС)) 0 — нет данных;2 — свободен;1 — не свободен;3 — выключено из действия;
        uint8_t ArriveCtrl    : 1;      //Контроль прибытия: 0 — нет состава; 1 - поезд в зоне ОПВ;
        uint8_t DoorGap       : 1;      //Исправность комплекта зазора дверей: 0: неисправен; 1: исправен;
        uint8_t SetOk         : 1;      //Исправность комплекта: 0: неисправен; 1: исправен;
        uint8_t Mode          : 1;      //режим работы: 0 — ручной; 1 — автоматический;
    } DAC;
    uint8_t deadlock;                   //Номер тупика по заданному маршруту (гл. путь — 0)
    uint8_t SAAck;                      //Квитанция СА на принятие события (-ий) ПА. (возвращает « Счетчик событий ПА» на приятое событие в обработку)
    uint32_t CPCounter;                 //Счетчик ЦП
    uint32_t id;                        //Идентификатор поезда
    uint16_t cduRoute;                  //Графиковый номер маршрута
    uint16_t cduTrain;                  //Графиковый номер поезда
    uint16_t turnStation;               //Код станции оборота
    uint32_t timeDepNeeded;             //Заданное время отправления
    uint32_t timeDepSched;              //Графиковое время отправления
    uint32_t timeArvNeeded;             //Заданное время прибытия на следующую станцию
    uint32_t timeArvSched;              //Графиковое время прибытия на следующую станцию
    uint8_t CPway;                      //Номер пути от ЦП 1 — певый путь, 2 -второй путь.
};

struct PACKED RadioOutputs
{
    uint8_t protocol;                   //Номер версии протокола по радиканалу
    uint32_t id;                        //(зав. номера головы)
    uint16_t stationCode;               //Код станции от ПА из БД
    uint8_t PACounter;                  //Последовательный счетчик сообщений, увеличивающееся на единицу с каждым следующим сообщением
    uint8_t way;                        //Номер главного станционного пути. 1 - первый главный путь, 2 - второй главный путь
    uint8_t NData;                      //Количество данных(15)
    struct PACKED  POStype              //Положение поезда
    {
        uint8_t stopped         : 1;    //1 - Признак "Состав остановлен"
        uint8_t OPV             : 1;    //1 - Признак "Состав в зоне открытия дверей"
    } POS;
    uint8_t  mode;                      //Текущий режим ПА 1 - АВ; 2 — КС; 3 — АЛС
    uint16_t reserved;                  //Счетчик событий ПА
    struct PACKED KDRtype               //режим работы ПА
    {
        uint8_t MoveDir         : 1;    //направление движения или осаживание. 1 — движение в неправильном направлении или осаживание); 0 — движение в правильном направлении;
        uint8_t reserved12      : 2;    //
        uint8_t DoorCtrl        : 1;    //контроль дверей: 1 — двери закрыты; 0 — двери открыты;
        uint8_t reserved45      : 2;    //
        uint8_t transit         : 1;    //1 — транзитный (без управления DAC); 0 — не транзитный;
        uint8_t reserved7       : 1;    //
    } KDR;
    struct PACKED PAEventsType          //События от ПА
    {
        uint8_t Doors_auto      : 1;    //Автоматическое открытие дверей поезда
        uint8_t Doors_m_open    : 1;    //Ручное открытие дверей поезда
        uint8_t Doors_m_close   : 1;    //Ручное закрытие дверей
        uint8_t reserved        : 1;    //
        uint8_t VZP             : 1;    //0 - поезд не отправился; 1 - поезд готов отправиться, попытка сбора схемы на ход(ПА: есть допустимая скор.=> подтв. закрытия станционных дверей свободность зазора от СА, маршрут установлен, светофор открыт и наступление расчетного времени отпраления).
        uint8_t GrafReq         : 1;    //требуется графиковая информация 1 — требуется, 0 — нет.
    } PAEvents;
    uint8_t  eventCntr;                 //Счетчик событий ПА
    uint16_t cduRoute;                  //Графиковый номер маршрута
    uint16_t cduTrain;                  //Графиковый номер поезда
    uint32_t CPCounter;                 //Счетчик ЦП
};

struct WirelessOutputs
{
    //--------- GENERAL ----------
    uint32_t id;				//10//Идентификатор поезда
    //---- PA_STOP & PA_DEPARTURE ----
    uint16_t cduRoute;		//18//Графиковый номер маршрута
    uint16_t cduTrain;		//20//Графиковый номер поезда
    uint8_t way;				//21//Номер главного станционного пути. 1 - первый главный путь, 2 - второй главный путь
    uint8_t mode;				//22//Текущий режим ПА
    //---- ONLY PA_STOP
    uint32_t timeArv;					//24//Фактическое время прибытия поезда
    //---- ONLY PA_DEPARTURE
    uint32_t timeDep;					//26//Фактическое время отправления поезда
//    uint16_t IPpa;			//0x1122 - 22.11 - последние цифры IP адреса ПА
    uint8_t aux1;				//резерв. Выравнивание до 8 ПДО. 0x01 - sendPA событие
//	uint8_t aux2;				//резерв. Выравнивание до 8 ПДО*/
//============================================================================================
    uint16_t stationCode;               //Код станции от ПА из БД
    struct PACKED  POStype              //Положение поезда
    {
        uint8_t stopped         : 1;    //1 - Признак "Состав остановлен"
        uint8_t OPV             : 1;    //1 - Признак "Состав в зоне открытия дверей"
    } POS;
    struct PACKED KDRtype               //режим работы ПА
    {
        uint8_t MoveDir         : 1;    //направление движения или осаживание. 1 — движение в неправильном направлении или осаживание); 0 — движение в правильном направлении;
        uint8_t reserved12      : 2;    //
        uint8_t DoorCtrl        : 1;    //контроль дверей: 1 — двери закрыты; 0 — двери открыты;
        uint8_t reserved45      : 2;    //
        uint8_t transit         : 1;    //1 — транзитный (без управления DAC); 0 — не транзитный;
        uint8_t reserved7       : 1;    //
    } KDR;
    struct PACKED PAEventsType          //События от ПА
    {
        uint8_t Doors_auto      : 1;    //Автоматическое открытие дверей поезда
        uint8_t Doors_m_open    : 1;    //Ручное открытие дверей поезда
        uint8_t Doors_m_close   : 1;    //Ручное закрытие дверей
        uint8_t reserved        : 1;    //
        uint8_t VZP             : 1;    //0 - поезд не отправился; 1 - поезд готов отправиться, попытка сбора схемы на ход(ПА: есть допустимая скор.=> подтв. закрытия станционных дверей свободность зазора от СА, маршрут установлен, светофор открыт и наступление расчетного времени отпраления).
        uint8_t GrafReq         : 1;    //требуется графиковая информация 1 — требуется, 0 — нет.
    } PAEvents;
    uint8_t  eventCntr;                 //Счетчик событий ПА
//    uint32_t CPCounter;                 //Счетчик ЦП
};

struct PACKED WirelessInputs
{
    //--------- GENERAL ----------
    uint8_t flags;			// 1//Признаки приема данных от СА (0x1 - SA_BROADCAST, 0x2 - SA_STOP, 0x4 - SA_DEPARTURE)
                                        // и факта передачи данных от ПА (0x10 - PA_KVIT, 0x20 - PA_STOP,   0x40 - PA_DEPARTURE)
//	uint8_t protocol;			// 2//Номер версии протокола
//    uint32_t timeCurrent;		// 6//SA_BROADCAST Текущее время КАС ДУ с учётом часового пояса. SA_DEPARTURE_PARAMS и SA_STOPPARAMS - время формирования сообщения
    //---- ONLY SA_BROADCAST -----
    uint16_t stationCode;		// 8//Код станции (В соответствии с классификатором метрополитена)
    //---- SA_DEPARTURE & SA_STOP
//    uint8_t cduCounter;		// 9//Счётчик - беззнаковое целое число, увеличивающееся на единицу с каждым следующим сообщением
    uint32_t id;				//13//Идентификатор поезда
    uint16_t cduRoute;		//15//Графиковый номер маршрута
    uint16_t cduTrain;		//17//Графиковый номер поезда
    uint16_t turnStation;		//19//Код станции оборота
    uint32_t timeArvNeeded;			//21//Заданное время прибытия на следующую станцию
    uint32_t timeArvSched;			//23//Графиковое время прибытия на следующую станцию
    //---- ONLY SA_STOP ----
    uint32_t timeDepNeeded;			//25//Заданное время отправления
    uint32_t timeDepSched;			//27//Графиковое время отправления
    //---- ONLY SA_DEPARTURE
    uint16_t turnStationNext;	//29//Код станции оборота следующего поезда* (необходимо для отображения на ПУИ соответствующей  информации)
    uint8_t routeNumber;		//30//Номер станционного маршрута** (необходимо для обеспечения возможности автооборота)
//    uint16_t IPsa;			//0x1122 - 22.11 - последние цифры IP адреса СА
//======================================================================================
    uint8_t way;                        //Номер главного станционного пути. 1 - первый главный путь, 2 - второй главный путь
    struct PACKED KRUtype               //разрешенные режимы от СА
    {
        uint8_t enModes       : 2;      //разрешеные для ПА. 0 - нет информации;1 — режим АВ;2 - режим КС;3 — режим АЛС;
        uint8_t OPVinfo       : 3;      //0 — нет информации от ДПУ;1 - недоезд до зоны ОПВ;2 - переезд зоны ОПВ;3 - в зоне ОПВ (Признак "Точная остановка состава" );4 — отказ ДПУ.
        uint8_t AVInfo        : 1;      //1 — наличие параметров автоведения от ЦП; 0 — нет параметров автоведения от ЦП;
        uint8_t ReadyGo       : 1;      //Признак "Готовность к отправлению" 1 — есть готовность; 0 — нет готовности;
    } KRU;
    struct PACKED DACtype               //cостояние станционных дверей (всех по «И»)
    {
        uint8_t DoorState     : 2;      //состояние дверей станции 0 - нет данных;2 - закрыты;1 — открыты;3 — выключена из действия;
        uint8_t PDS           : 2;      //(Промежуток дверь-состав (ПДС)) 0 — нет данных;2 — свободен;1 — не свободен;3 — выключено из действия;
        uint8_t ArriveCtrl    : 1;      //Контроль прибытия: 0 — нет состава; 1 - поезд в зоне ОПВ;
        uint8_t DoorGap       : 1;      //Исправность комплекта зазора дверей: 0: неисправен; 1: исправен;
        uint8_t SetOk         : 1;      //Исправность комплекта: 0: неисправен; 1: исправен;
        uint8_t Mode          : 1;      //режим работы: 0 — ручной; 1 — автоматический;
    } DAC;
    uint8_t deadlock;                   //Номер тупика по заданному маршруту (гл. путь — 0)
//    uint8_t SAAck;                      //Квитанция СА на принятие события (-ий) ПА. (возвращает « Счетчик событий ПА» на приятое событие в обработку)
//    uint32_t CPCounter;                 //Счетчик ЦП
//    uint8_t CPway;                      //Номер пути от ЦП 1 — певый путь, 2 -второй путь.
};

#endif // DATA_H
